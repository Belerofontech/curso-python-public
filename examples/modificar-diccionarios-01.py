#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Soluci칩n para el Ejercicio 6 "modificar diccionarios" del M칩dulo 6
# (ampliaci칩n del Ejercicio / demo "recorrer diccionarios" del M칩dulo 4, a침adiendo proveedor)
# Soluci칩n de la cuarta fila de clase

# Ventajas de esta estr. para los datos: es m치s expresiva y m치s f치cilmente ampliable, y
# seguramente sirva mejor para otros tipos de c치lculos y operaciones
# Desventajas: tal como est치 ahora mismo, no permite varios proveedores para un producto!
frutas = {
    "Naranjas 游꼙": {"cantidad": 25, "proveedor": "p1"},
    "Manzanas 游꼞": {"cantidad": 1, "proveedor": "p2"},
    "Fresas 游꼡": {"cantidad": 240, "proveedor": "p3"},
    "Kiwis 游볳": {"cantidad": 15.33333, "proveedor": "p1"},
    "Pl치tanos 游꼛": {"cantidad": 5.5, "proveedor": "p2"},
}


# Usamos un diccionario auxiliar sencillo clave-valor (proveedor-peso total), ej.: { "p1" : 25 }
pesos_subtotal = {}

# Recorrer todos los productos e ir acumulando seg칰n/donde corresponda sus pesos...
for fruta in frutas.keys():
    print("La cantidad de", fruta, "es", frutas[fruta]["cantidad"])
    prov = frutas[fruta]["proveedor"]
    # Ojo, en el diccionario auxiliar la primera vez no habr치 nada, tengo que gestionarlo
    if prov in pesos_subtotal:
        pesos_subtotal[prov] = pesos_subtotal[prov] + frutas[fruta]["cantidad"]
    else:
        pesos_subtotal[prov] = frutas[fruta]["cantidad"]
    # Alternativa mejor: con get(), que lee el valor, pero devuelve 0 si no existe
    # pesos_subtotal[prov] = pesos_subtotal.get(prov, 0) + frutas[fruta]["cantidad"]

# Escribir la soluci칩n
print()

for prov in pesos_subtotal.keys():
    print("La cantidad del proveedor", prov, "es", pesos_subtotal[prov])
